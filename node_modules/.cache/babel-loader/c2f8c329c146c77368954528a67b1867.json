{"ast":null,"code":"import proyectReducer from \"./proyectReducer\";\nimport authReducer from \"./authReducer\";\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nfunction saveToLocalStorage(store) {\n  try {\n    //console.log('saveLocalStorage');\n    //console.log(store);\n    var serializedState = JSON.stringify(store);\n    localStorage.setItem('JobInterviewMe', serializedState);\n  } catch (e) {\n    console.log(e);\n  }\n}\n/*function saveToCookies(user) {\r\n    //console.log(\"save cookies\");\r\n    //console.log(store.getState().auth.cookies);\r\n    //console.log(cookiesAcepted);\r\n    if (store.getState().auth.cookies){\r\n        //console.log(\"OK\");\r\n        Cookies.set('booktopays', user);\r\n    }\r\n    //console.log('saveCookies');\r\n}\r\nfunction loadFromCookies() {\r\n    try {\r\n        //console.log('loadingCookies');\r\n        const cookiesAccepted = Cookies.get('booktopaysAcceptedCookies');\r\n        //console.log(cookiesAccepted);\r\n        if (cookiesAccepted === 'true'){\r\n            //console.log('loadedCookies');\r\n            const serializedState = Cookies.get('booktopays');\r\n            //console.log(serializedState);\r\n            if(serializedState!==undefined){\r\n                return JSON.parse(serializedState);\r\n            }else{\r\n                return undefined;\r\n            }\r\n        }else{\r\n            //console.log('loadedCookies false');\r\n            return undefined;\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}*/\n\n\nfunction loadFromLocalStorage() {\n  try {\n    //console.log('loadLocalStorage');\n    var serializedState = localStorage.getItem('JobInterviewMe'); //console.log(serializedState);\n\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n}\n\nvar persitedState = loadFromLocalStorage();\nvar rootReducer = combineReducers({\n  auth: authReducer,\n  proyect: proyectReducer\n});\nvar store = createStore(rootReducer, persitedState, applyMiddleware(reduxThunk));\n/*Actualiza el localstorage cada ves que se modifica el store*/\n\nstore.subscribe(function () {\n  return saveToLocalStorage(store.getState());\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/ighil/Documents/ReactProyects/JobInterViewMe/src/store/reducers/rootReducer.js"],"names":["proyectReducer","authReducer","combineReducers","createStore","applyMiddleware","reduxThunk","saveToLocalStorage","store","serializedState","JSON","stringify","localStorage","setItem","e","console","log","loadFromLocalStorage","getItem","undefined","parse","persitedState","rootReducer","auth","proyect","subscribe","getState"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,eAAR,EAAyBC,WAAzB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,MAAI;AACA;AACA;AACA,QAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCJ,eAAvC;AACH,GALD,CAKE,OAAOK,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,oBAAT,GAAgC;AAC5B,MAAI;AACA;AACA,QAAMR,eAAe,GAAGG,YAAY,CAACM,OAAb,CAAqB,gBAArB,CAAxB,CAFA,CAGA;;AACA,QAAIT,eAAe,KAAK,IAAxB,EAA8B,OAAOU,SAAP;AAC9B,WAAOT,IAAI,CAACU,KAAL,CAAWX,eAAX,CAAP;AACH,GAND,CAME,OAAOK,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAOK,SAAP;AACH;AACJ;;AAED,IAAME,aAAa,GAAGJ,oBAAoB,EAA1C;AAEA,IAAMK,WAAW,GAAGnB,eAAe,CAAC;AAChCoB,EAAAA,IAAI,EAAErB,WAD0B;AAEhCsB,EAAAA,OAAO,EAAEvB;AAFuB,CAAD,CAAnC;AAIA,IAAMO,KAAK,GAAGJ,WAAW,CAACkB,WAAD,EAAcD,aAAd,EAA6BhB,eAAe,CAACC,UAAD,CAA5C,CAAzB;AAEA;;AACAE,KAAK,CAACiB,SAAN,CAAgB;AAAA,SAAMlB,kBAAkB,CAACC,KAAK,CAACkB,QAAN,EAAD,CAAxB;AAAA,CAAhB;AACA,eAAelB,KAAf","sourcesContent":["import proyectReducer from \"./proyectReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\n\r\nfunction saveToLocalStorage(store) {\r\n    try {\r\n        //console.log('saveLocalStorage');\r\n        //console.log(store);\r\n        const serializedState = JSON.stringify(store);\r\n        localStorage.setItem('JobInterviewMe', serializedState);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n/*function saveToCookies(user) {\r\n    //console.log(\"save cookies\");\r\n    //console.log(store.getState().auth.cookies);\r\n    //console.log(cookiesAcepted);\r\n    if (store.getState().auth.cookies){\r\n        //console.log(\"OK\");\r\n        Cookies.set('booktopays', user);\r\n    }\r\n    //console.log('saveCookies');\r\n}\r\nfunction loadFromCookies() {\r\n    try {\r\n        //console.log('loadingCookies');\r\n        const cookiesAccepted = Cookies.get('booktopaysAcceptedCookies');\r\n        //console.log(cookiesAccepted);\r\n        if (cookiesAccepted === 'true'){\r\n            //console.log('loadedCookies');\r\n            const serializedState = Cookies.get('booktopays');\r\n            //console.log(serializedState);\r\n            if(serializedState!==undefined){\r\n                return JSON.parse(serializedState);\r\n            }else{\r\n                return undefined;\r\n            }\r\n        }else{\r\n            //console.log('loadedCookies false');\r\n            return undefined;\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}*/\r\nfunction loadFromLocalStorage() {\r\n    try {\r\n        //console.log('loadLocalStorage');\r\n        const serializedState = localStorage.getItem('JobInterviewMe');\r\n        //console.log(serializedState);\r\n        if (serializedState === null) return undefined;\r\n        return JSON.parse(serializedState);\r\n    } catch (e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}\r\n\r\nconst persitedState = loadFromLocalStorage();\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    proyect: proyectReducer,\r\n});\r\nconst store = createStore(rootReducer, persitedState, applyMiddleware(reduxThunk));\r\n\r\n/*Actualiza el localstorage cada ves que se modifica el store*/\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}