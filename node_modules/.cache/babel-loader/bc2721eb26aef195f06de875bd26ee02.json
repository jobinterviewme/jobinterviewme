{"ast":null,"code":"var r = function r(_r) {\n  return _r.reduce(function (r, t, n) {\n    return r + (\"string\" == typeof t ? (n > 0 ? \".\" : \"\") + t : \"[\" + t + \"]\");\n  }, \"\").toString();\n};\n\nexport { r as convertArrayToPathName };","map":{"version":3,"sources":["../src/convertArrayToPathName.ts"],"names":["convertArrayToPathName","paths","reduce","previous","path","index","toString"],"mappings":"AAAaA,IAAAA,CAAAA,GAAyB,WAACC,EAAD,EAACA;AAAAA,SACrCA,EAAAA,CACGC,MADHD,CAEI,UAACE,CAAD,EAAWC,CAAX,EAAkCC,CAAlC,EAAkCA;AAAAA,WAC7BF,CAAAA,IACe,YAAA,OAATC,CAAS,GAATA,CACAC,CAAAA,GAAQ,CAARA,GAAY,GAAZA,GAAkB,EADlBD,IACuBA,CADd,GACcA,MACtBA,CADsBA,GACtBA,GAHPD,CAD6BE;AAItBD,GANhBH,EAQI,EARJA,EAUGK,QAVHL,EADqCA;AAWlCK,CAXQN;;AAWRM,SAAAA,CAAAA,IAAAA,sBAAAA","sourcesContent":["export const convertArrayToPathName = (paths: (string | number)[]): string =>\n  paths\n    .reduce(\n      (previous, path: string | number, index): string =>\n        `${previous}${\n          typeof path === 'string'\n            ? `${index > 0 ? '.' : ''}${path}`\n            : `[${path}]`\n        }`,\n      '',\n    )\n    .toString();\n"]},"metadata":{},"sourceType":"module"}