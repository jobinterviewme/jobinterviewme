{"ast":null,"code":"var typeTemplate = \"'${name}' is not a valid ${type}\";\nexport var defaultValidateMessages = {\n  \"default\": \"Validation error on field '${name}'\",\n  required: \"'${name}' is required\",\n  \"enum\": \"'${name}' must be one of [${enum}]\",\n  whitespace: \"'${name}' cannot be empty\",\n  date: {\n    format: \"'${name}' is invalid for format date\",\n    parse: \"'${name}' could not be parsed as date\",\n    invalid: \"'${name}' is invalid date\"\n  },\n  types: {\n    string: typeTemplate,\n    method: typeTemplate,\n    array: typeTemplate,\n    object: typeTemplate,\n    number: typeTemplate,\n    date: typeTemplate,\n    \"boolean\": typeTemplate,\n    integer: typeTemplate,\n    \"float\": typeTemplate,\n    regexp: typeTemplate,\n    email: typeTemplate,\n    url: typeTemplate,\n    hex: typeTemplate\n  },\n  string: {\n    len: \"'${name}' must be exactly ${len} characters\",\n    min: \"'${name}' must be at least ${min} characters\",\n    max: \"'${name}' cannot be longer than ${max} characters\",\n    range: \"'${name}' must be between ${min} and ${max} characters\"\n  },\n  number: {\n    len: \"'${name}' must equal ${len}\",\n    min: \"'${name}' cannot be less than ${min}\",\n    max: \"'${name}' cannot be greater than ${max}\",\n    range: \"'${name}' must be between ${min} and ${max}\"\n  },\n  array: {\n    len: \"'${name}' must be exactly ${len} in length\",\n    min: \"'${name}' cannot be less than ${min} in length\",\n    max: \"'${name}' cannot be greater than ${max} in length\",\n    range: \"'${name}' must be between ${min} and ${max} in length\"\n  },\n  pattern: {\n    mismatch: \"'${name}' does not match pattern ${pattern}\"\n  }\n};","map":{"version":3,"sources":["C:/Users/ighil/Documents/ReactProyects/fdfdf/jobinterviewme/node_modules/rc-field-form/es/utils/messages.js"],"names":["typeTemplate","defaultValidateMessages","required","whitespace","date","format","parse","invalid","types","string","method","array","object","number","integer","regexp","email","url","hex","len","min","max","range","pattern","mismatch"],"mappings":"AAAA,IAAIA,YAAY,GAAG,kCAAnB;AACA,OAAO,IAAIC,uBAAuB,GAAG;AACnC,aAAS,qCAD0B;AAEnCC,EAAAA,QAAQ,EAAE,uBAFyB;AAGnC,UAAM,oCAH6B;AAInCC,EAAAA,UAAU,EAAE,2BAJuB;AAKnCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,sCADJ;AAEJC,IAAAA,KAAK,EAAE,uCAFH;AAGJC,IAAAA,OAAO,EAAE;AAHL,GAL6B;AAUnCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAET,YADH;AAELU,IAAAA,MAAM,EAAEV,YAFH;AAGLW,IAAAA,KAAK,EAAEX,YAHF;AAILY,IAAAA,MAAM,EAAEZ,YAJH;AAKLa,IAAAA,MAAM,EAAEb,YALH;AAMLI,IAAAA,IAAI,EAAEJ,YAND;AAOL,eAASA,YAPJ;AAQLc,IAAAA,OAAO,EAAEd,YARJ;AASL,aAAOA,YATF;AAULe,IAAAA,MAAM,EAAEf,YAVH;AAWLgB,IAAAA,KAAK,EAAEhB,YAXF;AAYLiB,IAAAA,GAAG,EAAEjB,YAZA;AAaLkB,IAAAA,GAAG,EAAElB;AAbA,GAV4B;AAyBnCS,EAAAA,MAAM,EAAE;AACNU,IAAAA,GAAG,EAAE,6CADC;AAENC,IAAAA,GAAG,EAAE,8CAFC;AAGNC,IAAAA,GAAG,EAAE,mDAHC;AAINC,IAAAA,KAAK,EAAE;AAJD,GAzB2B;AA+BnCT,EAAAA,MAAM,EAAE;AACNM,IAAAA,GAAG,EAAE,6BADC;AAENC,IAAAA,GAAG,EAAE,sCAFC;AAGNC,IAAAA,GAAG,EAAE,yCAHC;AAINC,IAAAA,KAAK,EAAE;AAJD,GA/B2B;AAqCnCX,EAAAA,KAAK,EAAE;AACLQ,IAAAA,GAAG,EAAE,4CADA;AAELC,IAAAA,GAAG,EAAE,gDAFA;AAGLC,IAAAA,GAAG,EAAE,mDAHA;AAILC,IAAAA,KAAK,EAAE;AAJF,GArC4B;AA2CnCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AADH;AA3C0B,CAA9B","sourcesContent":["var typeTemplate = \"'${name}' is not a valid ${type}\";\nexport var defaultValidateMessages = {\n  default: \"Validation error on field '${name}'\",\n  required: \"'${name}' is required\",\n  enum: \"'${name}' must be one of [${enum}]\",\n  whitespace: \"'${name}' cannot be empty\",\n  date: {\n    format: \"'${name}' is invalid for format date\",\n    parse: \"'${name}' could not be parsed as date\",\n    invalid: \"'${name}' is invalid date\"\n  },\n  types: {\n    string: typeTemplate,\n    method: typeTemplate,\n    array: typeTemplate,\n    object: typeTemplate,\n    number: typeTemplate,\n    date: typeTemplate,\n    boolean: typeTemplate,\n    integer: typeTemplate,\n    float: typeTemplate,\n    regexp: typeTemplate,\n    email: typeTemplate,\n    url: typeTemplate,\n    hex: typeTemplate\n  },\n  string: {\n    len: \"'${name}' must be exactly ${len} characters\",\n    min: \"'${name}' must be at least ${min} characters\",\n    max: \"'${name}' cannot be longer than ${max} characters\",\n    range: \"'${name}' must be between ${min} and ${max} characters\"\n  },\n  number: {\n    len: \"'${name}' must equal ${len}\",\n    min: \"'${name}' cannot be less than ${min}\",\n    max: \"'${name}' cannot be greater than ${max}\",\n    range: \"'${name}' must be between ${min} and ${max}\"\n  },\n  array: {\n    len: \"'${name}' must be exactly ${len} in length\",\n    min: \"'${name}' cannot be less than ${min} in length\",\n    max: \"'${name}' cannot be greater than ${max} in length\",\n    range: \"'${name}' must be between ${min} and ${max} in length\"\n  },\n  pattern: {\n    mismatch: \"'${name}' does not match pattern ${pattern}\"\n  }\n};"]},"metadata":{},"sourceType":"module"}